# -*- coding: utf-8 -*-
"""python for microbiologist .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kYlKx2iDh41ny1Qbb0UwGOywToOIf5et

**Importing necessary liraries**
"""

import tensorflow as tf
import os
import random
import numpy as np
from tqdm import tqdm 
from skimage.io import imread, imshow
from skimage.transform import resize
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/gdrive/',force_remount=True)
# root_path = '/content/drive/MyDrive/nuclie/stage1_train'
# root_path

seed = 30
np.random.seed = seed

"""**Pre-processing the data** 
> Resizing images and masks


"""

img_width = 128
img_height = 128
img_channel = 3

train_path = '/content/gdrive/MyDrive/nuclie/stage1_train/'
test_path = '/content/gdrive/MyDrive/nuclie/stage1_test/'

train_ids = next(os.walk(train_path))[1]
test_ids  = next(os.walk(test_path))[1]

X_train = np.zeros((len(train_ids),IMG_HEIGHT,img_width,img_channel),dtype=np.uint8)
Y_train = np.zeros((len(train_ids),IMG_HEIGHT,img_width,1),dtype=np.bool)

for n,id_ in tqdm(enumerate(train_ids),total=len(train_ids)):
  path = train_path + id_
  img = imread(path+'/images/'+id_+'.png')[:,:,:img_channel]
  img = resize(img, (img_height,img_width, 1), mode='constant',preserve_range=True)
  X_train[n] = img   
  mask = np.zeros((img_height,img_width, 1), dtype=np.bool)
  for mask_file in next(os.walk(path+'/masks/'))[2]:
    mask_ = imread(path+'/masks/'+mask_file)
    mask_ = np.expand_dims(resize(mask_,(img_height,img_width),mode='constant',preserve_range=True),axis=-1)
    mask = np.maximum(mask,mask_)

  Y_train[n] = mask

# test images
X_test = np.zeros((len(test_ids), img_height, img_width, img_channel), dtype=np.uint8)
sizes_test = []
 
for n, id_ in tqdm(enumerate(test_ids), total=len(test_ids)):
    path = test_path + id_
    img = imread(path + '/images/' + id_ + '.png')[:,:,:img_channel]
    sizes_test.append([img.shape[0], img.shape[1]])
    img = resize(img, (img_height, img_width), mode='constant', preserve_range=True)
    X_test[n] = img



image_x = random.randint(0, len(train_ids))
imshow(X_train[image_x])
plt.show()
imshow(np.squeeze(Y_train[image_x]))
plt.show()

image_x = random.randint(0, len(train_ids))
imshow(X_train[image_x])
plt.show()
imshow(np.squeeze(Y_train[image_x]))
plt.show()

"""##Building the model"""

input = tf.keras.layers.Input((img_width,img_height,img_channel))

s = tf.keras.layers.Lambda(lambda x:x/255)(input)

#encoder
c_1 = tf.keras.layers.Conv2D(16,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(s)
c_1 = tf.keras.layers.Dropout(0.1)(c_1)
c_1 = tf.keras.layers.Conv2D(16,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(c_1)
p_1 = tf.keras.layers.MaxPooling2D((2,2))(c_1)

c_2 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p_1)
c_2 = tf.keras.layers.Dropout(0.1)(c_2)
c_2 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c_2)
p_2 = tf.keras.layers.MaxPooling2D((2, 2))(c_2)
 
c_3 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p_2)
c_3 = tf.keras.layers.Dropout(0.2)(c_3)
c_3 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c_3)
p_3 = tf.keras.layers.MaxPooling2D((2, 2))(c_3)
 
c_4 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p_3)
c_4 = tf.keras.layers.Dropout(0.2)(c_4)
c_4 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c_4)
p_4 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(c_4)
 
c_5 = tf.keras.layers.Conv2D(256, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p_4)
c_5 = tf.keras.layers.Dropout(0.3)(c_5)
c_5 = tf.keras.layers.Conv2D(256, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c_5)

#decoder
u_6 = tf.keras.layers.Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same')(c_5)
u_6 = tf.keras.layers.concatenate([u_6, c_4])
c_6 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u_6)
c_6 = tf.keras.layers.Dropout(0.2)(c_6)
c_6 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c_6)
 
u_7 = tf.keras.layers.Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same')(c_6)
u_7 = tf.keras.layers.concatenate([u_7, c_3])
c_7 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u_7)
c_7 = tf.keras.layers.Dropout(0.2)(c_7)
c_7 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c_7)
 
u_8 = tf.keras.layers.Conv2DTranspose(32, (2, 2), strides=(2, 2), padding='same')(c_7)
u_8 = tf.keras.layers.concatenate([u_8, c_2])
c_8 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u_8)
c_8 = tf.keras.layers.Dropout(0.1)(c_8)
c_8 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c_8)
 
u_9 = tf.keras.layers.Conv2DTranspose(16, (2, 2), strides=(2, 2), padding='same')(c_8)
u_9 = tf.keras.layers.concatenate([u_9, c_1], axis=3)
c_9 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u_9)
c_9 = tf.keras.layers.Dropout(0.1)(c_9)
c_9 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c_9)


outputs = tf.keras.layers.Conv2D(1,(1,1), activation='sigmoid')(c_9)
model = tf.keras.Model(input=[input], outputs=[outputs])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

"""**model checkpoints**"""

checkpointer = tf.keras.callbacks.ModelCheckpoint('model_for_nuclie.h5',verbose=1,save_best_only='true')


callbacks = [tf.keras.callbacks.EarlyStopping(patience=2, monitor='val_loss'),
             tf.keras.callbacks.TensorBoard(log_dir='logs')]

results = model.fit(X_train,Y_train, validation_split=0.1,batch_size=16, epochs=25, callbacks=callbacks)

acc = results.history['accuracy']
loss = results.history['loss']
epochs = range(len(acc))
plt.plot(epochs, acc, label='Training accuracy')
plt.title('Training accuracy')
plt.figure()
plt.plot(epochs, loss,label='Training Loss')
plt.title('Training loss')
plt.legend()

plt.show()

idx = random.randint(0, len(X_train))


preds_train = model.predict(X_train[:int(X_train.shape[0]*0.9)], verbose=1)
preds_val = model.predict(X_train[int(X_train.shape[0]*0.9):], verbose=1)
preds_test = model.predict(X_test, verbose=1)

 
preds_train_t = (preds_train > 0.5).astype(np.uint8)
preds_val_t = (preds_val > 0.5).astype(np.uint8)
preds_test_t = (preds_test > 0.5).astype(np.uint8)

ix = random.randint(0, len(preds_train_t))
imshow(X_train[ix])
plt.show()
imshow(np.squeeze(Y_train[ix]))
plt.show()
imshow(np.squeeze(preds_train_t[ix]))
plt.show()